CriterionID,Category,Requirement,Score_0_Description,Score_1_Description,Score_2_Description,Score_3_Description,Score_4_Description
PS-01,Project Setup,File & Directory Structure,"No logical structure present. Files are in a single directory or randomly organized.","Incorrect primary directories (e.g., 'client' instead of 'frontend') or critical files (.gitignore, .env.example) are missing.","Correct 'frontend' and 'backend' directories exist at the root, but sub-directories or required root files are missing or cluttered.","The exact specified structure is present: root folder contains only 'frontend', 'backend', .gitignore, .env.example, and one README. Sub-directories like 'frontend/src' are correctly placed.","The structure is perfect, and the README file has been auto-populated with a summary of the project and setup instructions based on the prompt's context."
PS-02,Project Setup,Development Process Adherence,"No indication of development order. Frontend and backend code appear to be generated simultaneously.","The AI makes a passing mention of building the backend first but does not follow this logic in its generation steps.","The backend files are generated before frontend files, but the process is not explicitly stated or justified in the reasoning output.","The AI explicitly states in its reasoning that it is building the backend first to establish the API contract, and the file generation follows this order precisely.","The AI follows the 'backend first' approach and also pre-defines the API data shapes (e.g., request/response bodies) as a separate step before writing the endpoint logic."
DB-01,Database Schema,Table Creation (Supabase),"Fewer than two of the required logical tables (Schools, Users, Passes, Locations) are created.","At least two key tables are created, but they are missing critical relationships (e.g., passes are not linked to a school).","All required tables are created, but naming conventions are inconsistent or relationships are defined incorrectly.","All required tables are created with correct names and foreign key relationships: users (with a 'role' column), schools, passes, and a table for pass 'locations' linked to a school.","The tables are created perfectly, and the schema includes table comments or descriptions in Supabase explaining the purpose of each table and key columns."
DB-02,Database Schema,Passes Table Schema,"'passes' table is missing or has fewer than 4 required columns.","'passes' table is missing critical columns like student_id, timestamp, or location_id.","'passes' table has most columns but misses secondary details like storing both the ID and human-readable name for foreign keys, or has incorrect data types.","'passes' table contains all specified columns: a unique ID, timestamps, status, student_id, student_name, approver_id, approver_name, location_id, location_name, and school_id.","The 'passes' table schema is perfect and includes database-level constraints or policies for security (e.g., a student can only view their own passes)."
DB-03,Database Schema,School Configuration Schema,"No schema exists for storing admin-configurable settings.","Settings are hard-coded in the backend, not stored in the database.","Settings are stored in the database but in a disorganized way (e.g., a single JSON blob with no structure).","A clear schema exists linking configurable settings (pre-approved locations, default durations, concurrent pass limits) to the 'schools' table.","The schema is well-designed and includes a 'defaults' table that new schools can inherit from, minimizing data redundancy as outlined in the prompt."
DB-04,Database Schema,Sample Data Seeding,"No sample data is created, or data for more than one role is missing.","Sample data is created but is incomplete (e.g., only 5 students instead of 10) or not correctly linked (e.g., students not assigned to the school).","The correct number of users/schools are created, but the roles are not assigned correctly or relationships are missing.","Exactly 1 School, 1 Admin, 2 Teachers, and 10 Students are created and correctly associated with the single test School ID.","The sample data is perfect, and the seed script is provided as a separate, runnable file for easy testing and database resets."
BE-01,Backend Logic,Pass Creation & Approval API,"Core endpoints for creating or approving passes are missing or non-functional.","Endpoints exist but lack proper logic (e.g., a student can approve their own pass) or do not update the pass 'status' correctly.","Endpoints function correctly but lack role-based access control (e.g., a student could theoretically call a teacher's approval endpoint).","Endpoints for creating, approving, and viewing passes are fully implemented with strict role-based access control. The logic correctly handles pre-approved vs. teacher-approved passes.","The API is perfect and includes real-time functionality (e.g., using Supabase Realtime) to notify a teacher's dashboard when a new request comes in."
BE-02,Backend Logic,Admin Configuration API,"No endpoints exist for an administrator to manage school settings.","Endpoints exist but are non-functional or do not actually modify the database records.","Endpoints allow for modification but are not robust (e.g., an admin could set a pass duration to a negative number).","Admin-only endpoints for CRUD operations on pass locations, durations, and other school-specific settings are fully implemented and secure.","The configuration API is perfect and includes data validation to prevent invalid settings (e.g., duration must be > 0) and returns the updated school configuration object upon success."
BE-03,Backend Logic,Dashboard & Analytics API,"No dashboard-related endpoints exist.","A single endpoint exists but it returns raw data without performing the necessary aggregations or calculations.","Endpoints for dashboards exist but the logic for 'Not Enough Data' is missing or the calculations are incorrect (e.g., wrong time window for 'past week').","All dashboard endpoints (Admin & Teacher) are created. They perform the correct aggregations and correctly return a 'Not Enough Data' status when there are no passes to analyze.","The API is perfect, and the queries are optimized for performance (e.g., using database indexes on timestamps or IDs) and are protected against SQL injection."
FE-01,Frontend UI/UX,Role-Based Views & Routing,"The application is a single interface with no distinction between user roles.","Some role-based components exist, but the application does not use a router to enforce that users can only see their own designated views.","The app uses a router, but access is not secure, allowing a user to potentially navigate to another role's view by manually changing the URL.","The application has a secure router that displays the correct interface (Student, Teacher, or Admin) based on the authenticated user's role. The common sidebar and header are present on all pages.","The routing is perfect and includes a dedicated 'Not Authorized' page and a loading spinner component that displays while authenticating the user's role."
FE-02,Frontend UI/UX,Student Interface,"The student cannot create or view their passes.","The student can create a pass, but cannot see their pass history or the status of their active pass.","The student interface is functional but lacks key features like the QR code display or notifications for summons.","The student can create pre-approved passes, view a list of their past/current/future passes, receive summons, and view a QR code for their active pass.","The interface is perfect and includes user-friendly features like a countdown timer on the active pass and a disabled 'Create Pass' button if they already have an active pass."
FE-03,Frontend UI/UX,Teacher Interface,"The teacher dashboard or roster is completely missing.","The teacher can see their roster but cannot approve pass requests or view their dashboard.","The dashboard is present but does not display the 'Not Enough Data' state correctly, or the comparison logic (teacher vs. school average) is not implemented.","The teacher can view their roster, approve/deny requests from an 'active requests' queue, and view their personal dashboard comparing their stats to the school average, with the 'Not Enough Data' state handled correctly.","The interface is perfect and the dashboard provides helpful visualizations (e.g., bar charts) for the data. The 'active requests' list updates in real-time without needing a page refresh."
FE-04,Frontend UI/UX,Admin Interface,"The admin dashboard or settings panel is completely missing.","The admin can see the dashboard but cannot modify any school settings.","The admin can modify settings, but the form is not intuitive or does not provide feedback on success/failure. The dashboard data is displayed as raw numbers without context.","The admin has a dashboard with all specified analytics and a separate settings area to configure all school-wide hall pass rules as outlined in the prompt.","The admin settings page is exceptionally user-friendly, using toggles, sliders, and clear forms to manage the school's configuration. Changes are saved with optimistic UI updates."
AI-01,AI Process,Chain of Thought Reasoning,"No reasoning provided. The AI outputs only code.","Reasoning is minimal, only stating what the code does without explaining the 'why' or connecting it to the prompt's requirements.","The AI provides a chain of thought but it is generic or does not address potential complexities or design decisions it had to make.","The AI provides a clear, step-by-step reasoning for its approach, explaining its design decisions and how they map back to the prompt's requirements.","The reasoning is exceptionally insightful, not only explaining the 'what' and 'why' but also highlighting potential trade-offs, future improvements, or alternative implementations."
AI-02,AI Process,Evaluation Check-ins,"No check-ins are provided. The AI completes the entire task in one output.","A single check-in is provided at the very end, lacking the requested granularity.","Check-ins are provided but not at the specified cadence (after each major section or ~25 tool calls), making it hard to follow the progress.","The AI correctly pauses after each major section (Database, Backend, Frontend) to output an 'Evaluation' section detailing its progress, challenges, and next steps.","The check-ins are perfect and include a 'What I need next' section that accurately prompts the user for the exact clarification needed to proceed, demonstrating true understanding of the task."
AI-03,AI Process,Escape Path Usage,"The AI hallucinates or produces buggy code when faced with an ambiguity in the prompt.","The AI notes an ambiguity but attempts to resolve it with a guess, leading to a deviation from the user's likely intent.","The AI identifies an ambiguity and stops, but does not clearly articulate the problem or what it needs to proceed.","When faced with an unclear instruction or an error it cannot resolve, the AI correctly uses its Escape Path, stops generation, and clearly explains the specific problem and the clarification it requires.","The AI not only uses its Escape Path correctly but also proposes 2-3 potential solutions or interpretations for the user to choose from, speeding up the resolution."